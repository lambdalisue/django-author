# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ '**' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

# Cancels any in-progress runs when code is pushed to the same PR/branch
# At that point in time the running workflow results are irrelevant because there is new code to test against
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        DJANGO_VERSION: [ '2.2.*', '3.0.*', '3.1.*', '3.2.*', '4.0.*']
        python-version: ['3.7', '3.8', '3.9', '3.10']
        exclude:
          - DJANGO_VERSION: '4.0.*'
            python-version: '3.7'
          - DJANGO_VERSION: '3.1.*'
            python-version: '3.10'
          - DJANGO_VERSION: '3.0.*'
            python-version: '3.10'
          - DJANGO_VERSION: '2.2.*'
            python-version: '3.10'
      fail-fast: false

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
              python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ hashFiles('setup.py') }}-${{ matrix.DJANGO_VERSION }}

      - name: Install
        run: |
           pip install setuptools --upgrade
           pip install Django==${{ matrix.DJANGO_VERSION }}
           pip install pyaml
           pip install mock
           pip install coverage coveralls codecov
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Testing
        run: |
          python -Wall -W error::DeprecationWarning -m coverage run tests/runtests.py
          coveralls --service=github
          coverage xml && codecov
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          DB_ENGINE: ${{ matrix.DB_ENGINE }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: |
          pip install flake8 flake8-import-order flake8-blind-except flake8-tidy-imports flake8-commas flake8-trailing-commas flake8-comprehensions
          pip install isort black mypy
      - name: Running Flake8
        run: flake8 --application-import-names=author
      - name: Running isort
        run: python -m isort . --check-only --diff
      - name: Running mypy
        run: mypy author --ignore-missing-imports
      # TODO: enable and reformat black when no PRs are waiting
      # - name: Running black
      #   run: black --check .
